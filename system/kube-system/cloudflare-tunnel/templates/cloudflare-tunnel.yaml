apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: kube-system
  labels:
    app: cloudflared
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      containers:
        - name: cloudflared
          image: cloudflare/cloudflared:2024.6.0
          args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          livenessProbe:
            httpGet:
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
          - name: config
            mountPath: /etc/cloudflared/config
            readOnly: true
          - name: creds
            mountPath: /etc/cloudflared/creds
            readOnly: true
          - name: cert
            mountPath: /etc/cloudflared
            readOnly: true
          resources: {}
      volumes:
      - name: creds
        secret:
          secretName: tunnel-credentials
      - name: cert
        secret:
          secretName: tunnel-pem
      - name: config
        configMap:
          name: cloudflared
          items:
          - key: config.yaml
            path: config.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: kube-system
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: k3s
    credentials-file: /etc/cloudflared/creds/credentials.json

    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000

    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true

    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.

    ingress:
    # The first rule proxies traffic to the httpbin sample Service defined in app.yaml
    # - hostname: tunnel.example.com
    #   service: http://web-service:80

    # This rule sends traffic to the built-in hello-world HTTP server. This can help debug connectivity
    # issues. If hello.example.com resolves and tunnel.example.com does not, then the problem is
    # in the connection from cloudflared to your local service, not from the internet to cloudflared.
    - hostname: test-external.<secret:kv/data/domains~domain>
      service: hello_world
    - hostname: "*.<secret:kv/data/domains~domain>"
      service: https://traefik-external
      originRequest:
        # noTLSVerify: true
        # requesting dummy origin server name so that the right certificate is used
        originServerName: blaat.<secret:kv/data/domains~domain>


    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404